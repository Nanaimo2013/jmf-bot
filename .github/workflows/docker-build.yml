name: Docker Build and Publish

# This workflow can be triggered manually from the GitHub Actions tab
# or automatically on specific events
on:
  # Manual trigger with input parameters
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., 1.0.0)'
        required: true
        default: 'latest'
      image_type:
        description: 'Image type to build'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - light
          - both
      push_image:
        description: 'Push to registry'
        required: true
        default: true
        type: boolean
  
  # Automatically build on release
  release:
    types: [published]
  
  # Automatically build on specific tag pattern
  push:
    tags:
      - 'v*.*.*'

# Permissions needed for GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  docker-build:
    runs-on: ubuntu-latest
    env:
      VERSION: latest
      PUSH: true
      IMAGE_TYPE: standard
      REPO_OWNER_LOWER: ${{ github.repository_owner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Set version based on input or tag
    - name: Set version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        elif [[ "${{ github.event_name }}" == "release" || "${{ github.event_name }}" == "push" ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
          echo "VERSION=latest" >> $GITHUB_ENV
        fi
    
    # Determine if we should push
    - name: Set push flag
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "PUSH=${{ github.event.inputs.push_image }}" >> $GITHUB_ENV
        else
          echo "PUSH=true" >> $GITHUB_ENV
        fi
    
    # Determine which images to build
    - name: Set image type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "IMAGE_TYPE=${{ github.event.inputs.image_type }}" >> $GITHUB_ENV
        else
          echo "IMAGE_TYPE=both" >> $GITHUB_ENV
        fi
    
    # Convert repository owner to lowercase for Docker tags
    - name: Set lowercase repository owner
      run: |
        REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "REPO_OWNER_LOWER=$REPO_OWNER" >> $GITHUB_ENV
    
    # Build and push standard image if selected
    - name: Build and push standard image
      if: ${{ env.IMAGE_TYPE == 'standard' || env.IMAGE_TYPE == 'both' }}
      uses: docker/build-push-action@v6
      with:
        context: .
        push: ${{ env.PUSH == 'true' }}
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:${{ env.VERSION }}
          ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:latest
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    # Build and push light image if selected
    - name: Build and push light image
      if: ${{ env.IMAGE_TYPE == 'light' || env.IMAGE_TYPE == 'both' }}
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile.light
        push: ${{ env.PUSH == 'true' }}
        tags: |
          ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:${{ env.VERSION }}-light
          ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:light
        labels: |
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    # Output the image details
    - name: Image details
      run: |
        echo "::group::Docker Image Details"
        echo "Repository: ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot"
        echo "Version: ${{ env.VERSION }}"
        echo "Image Type: ${{ env.IMAGE_TYPE }}"
        echo "Pushed: ${{ env.PUSH }}"
        echo "::endgroup::"
        
        echo "::group::How to pull this image"
        if [[ "${{ env.IMAGE_TYPE }}" == "standard" || "${{ env.IMAGE_TYPE }}" == "both" ]]; then
          echo "docker pull ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:${{ env.VERSION }}"
        fi
        if [[ "${{ env.IMAGE_TYPE }}" == "light" || "${{ env.IMAGE_TYPE }}" == "both" ]]; then
          echo "docker pull ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:${{ env.VERSION }}-light"
        fi
        echo "::endgroup::"
        
        echo "::group::How to run this image"
        echo "docker run -d --name jmf-bot \\"
        echo "  -v \${PWD}/config.json:/usr/src/app/config.json \\"
        echo "  -v \${PWD}/logs:/usr/src/app/logs \\"
        echo "  --env-file .env \\"
        echo "  ghcr.io/${{ env.REPO_OWNER_LOWER }}/jmf-bot:${{ env.VERSION }}"
        echo "::endgroup::" 